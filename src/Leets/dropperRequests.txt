import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class TimeBucket {
        int low;
        int high;
        int requestCount;
        public TimeBucket(int low,int high){this.low = low ; this.high = high ; this.requestCount = 0;}
        public void incRequest() {
            this.requestCount++;
        }
    };
class Result {
    
    /*
     * Complete the 'droppedRequests' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER_ARRAY requestTime as parameter.
     */

    public static int droppedRequests(List<Integer> requestTime) {
    // Write your code here
        int droppedCount = 0;
        Map<Integer,TimeBucket> oneSecWindow = new HashMap<>();
        Map<Integer,TimeBucket> tenSecWindow = new HashMap<>();
        Map<Integer,TimeBucket> minWindow = new HashMap<>();
    
        TimeBucket oneSecBucket;
        TimeBucket tenSecBucket;
        TimeBucket minBucket;
    for(int  i = 0; i < requestTime.size() ; i++){
        boolean isDropped = false;
        int currTime = requestTime.get(i);
        if (oneSecWindow.containsKey(currTime)) {
            oneSecBucket = oneSecWindow.get(currTime);  
        } else {
            oneSecBucket = new TimeBucket(currTime, currTime);
            oneSecWindow.put(currTime, oneSecBucket);
        }
        oneSecBucket.incRequest();
        if (oneSecBucket.requestCount > 3) {
            isDropped = true;
        }
        for (int j = Math.max(1, currTime - 9) ; j <= currTime; j++) {
            if (tenSecWindow.containsKey(j)) {
                tenSecBucket = tenSecWindow.get(j);
            } else {
                tenSecBucket = new TimeBucket(j, j+9);
                tenSecWindow.put(j, tenSecBucket);
            }
            tenSecBucket.incRequest();
            if (tenSecBucket.requestCount > 20) {
                isDropped = true;
            }
        }
        for (int j = Math.max(1, currTime - 59) ; j <= currTime; j++) {
            if (minWindow.containsKey(j)) {
                minBucket = minWindow.get(j);
            } else {
                minBucket = new TimeBucket(j, j+59);
                minWindow.put(j, minBucket);
            }
            minBucket.incRequest();
            if (minBucket.requestCount > 60) {
                isDropped = true;
            }
        }
        
        if(isDropped){
            droppedCount++;
        }
    }
    return droppedCount;
    }

}

public class Solution {